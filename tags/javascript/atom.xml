<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: javascript, | Friparia Blog]]></title>
  <link href="http://friparia.github.io/tags/javascript/atom.xml" rel="self"/>
  <link href="http://friparia.github.io/"/>
  <updated>2014-12-18T14:56:13+08:00</updated>
  <id>http://friparia.github.io/</id>
  <author>
    <name><![CDATA[Friparia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[你真的了解javascript么?(上)]]></title>
    <link href="http://friparia.github.io/blog/2014/11/30/do-you-really-know-javascript/"/>
    <updated>2014-11-30T12:17:44+08:00</updated>
    <id>http://friparia.github.io/blog/2014/11/30/do-you-really-know-javascript</id>
    <content type="html"><![CDATA[<p>原文<a href="http://javascript-puzzlers.herokuapp.com/">JavaScript Puzzlers!</a>，对自己的Javascript有信心的可以尝试去完成这个测试。</p>

<p>Javascript这门语言一直受到争议，因为其灵活性以及各大浏览器的实现不同导致其有很多的陷阱，这些陷阱非常容易掉进去。我们以<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.19">EMAC 262(5.1)</a>标准为例来总结一些Javascript中意想不到的陷阱。当然，因为浏览器、REPL等实现方式不一样，以下的结果可能不一样。</p>

<!--more-->


<ol>
<li><p><code>["1", "2", "3"].map(parseInt)</code> 的执行结果是什么?</p>

<p> 答案是[1, NaN, NaN]， 原因是 parseInt 接受两个参数 (val, radix) 而 map 传递三个参数 (element, index, array)</p></li>
<li><p><code>[typeof null, null instanceof Object]</code> 的执行结果是什么?</p>

<p> 答案是[&ldquo;object&rdquo;, false]，多么不可思议，明明null的type是object，而null却又不是Object的一个实例，是因为typeof在对不可调用的对象操作时总是会返回"object"</p></li>
<li><p><code>[ [3,2,1].reduce(Math.pow), [].reduce(Math.pow) ]</code> 的执行结果是什么?</p>

<p> 会报错，因为对一个没有初始化的空数组进行操作的reduce方法会抛出TypeError</p></li>
<li><p>以下程序段的执行结果是什么
<code>javascript
var val = 'smtg';
console.log('Value is ' + (val === 'smtg') ? 'Something' : 'Nothing');
</code></p></li>
</ol>


<p>  这个非常有迷惑性，但是'+&lsquo;的优先级最高，所以结果是"Something"，我们来拆开看一下，先执行'Value is &rsquo; + (val == &lsquo;smtg&rsquo;), 然后才是 &lsquo;Value is true&rsquo; ? &lsquo;Something&rsquo; : &lsquo;Nothing&rsquo;</p>

<ol>
<li>以下程序段的执行结果是什么
<code>javascript
var name = 'World!';
(function () {
if (typeof name === 'undefined') {
 var name = 'Jack';
 console.log('Goodbye ' + name);
} else {
 console.log('Hello ' + name);
}
})();
</code></li>
</ol>


<p>  这个算是比较常见的，我相信你看完这个之后对这个就没有任何问题了，<a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#function.scopes">作用域与命名空间</a>。其实质是变量声明提升(Hoisting)，Javascript将会把var表达式和function声明提升到当前作用域的顶部，更多有关<a href="http://code.tutsplus.com/tutorials/quick-tip-javascript-hoisting-explained--net-15092">hoisting</a>
```javascript
var name; // 默认值‘undefined'</p>

<p>(function () {
  var name; // 默认值‘undefined'
  if (typeof name === &lsquo;undefined&rsquo;) {</p>

<pre><code>name = 'Jack';
console.log('Goodbye ' + name);
</code></pre>

<p>  } else {</p>

<pre><code>console.log('Hello ' + name);
</code></pre>

<p>  }
})();</p>

<p>name = &ldquo;World&rdquo;;
```</p>

<ol>
<li>以下程序段的执行结果是什么?
<code>javascript
var END = Math.pow(2, 53);
var START = END - 100;
var count = 0;
for (var i = START; i &lt;= END; i++) {
count++;
}
console.log(count);
</code></li>
</ol>


<p>  这是一个无限循环，2<sup>53</sup>是javascript中的最大的数，并且2<sup>53</sup>+1 = 2<sup>53</sup>，所以永远不会结束。</p>

<ol>
<li>以下程序段的执行结果是什么?
<code>javascript
var ary = [0,1,2];
ary[10] = 10;
ary.filter(function(x) { return x === undefined;});
</code></li>
</ol>


<p>  答案是[],因为Array.prototype.filter不对不存在的元素执行</p>

<ol>
<li>以下程序段的执行结果是什么?
<code>javascript
var two   = 0.2
var one   = 0.1
var eight = 0.8
var six   = 0.6
[two - one == one, eight - six == two]
</code></li>
</ol>


<p>  答案是[true, false]</p>

<ol>
<li>以下程序段的执行结果是什么?
<code>javascript
function showCase(value) {
switch(value) {
 case 'A':
   console.log('Case A');
   break;
 case 'B':
   console.log('Case B');
   break;
 case undefined:
   console.log('undefined');
   break;
 default:
   console.log('Do not know!');
}
}
showCase(new String('A'));
</code></li>
</ol>


<p>  答案是Do not know，因为switch内部使用的是===, <code>new String</code>创建一个Object</p>

<ol>
<li>以下程序段的结果是什么?
<code>javascript
function showCase2(value) {
switch(value) {
case 'A':
  console.log('Case A');
  break;
case 'B':
  console.log('Case B');
  break;
case undefined:
  console.log('undefined');
  break;
default:
  console.log('Do not know!');
}
}
showCase2(String('A'));
</code></li>
</ol>


<p>  有了上一问，这一问就好答多了，因为String(&lsquo;A&rsquo;)返回一个字符串而不是一个字符串对象，所以是Case A</p>

<ol>
<li>以下程序段的输出是什么
<code>javascript
function isOdd(num) {
return num % 2 == 1;
}
function isEven(num) {
return num % 2 == 0;
}
function isSane(num) {
return isEven(num) || isOdd(num);
}
var values = [7, 4, '13', -9, Infinity];
values.map(isSane);
</code></li>
</ol>


<p>  答案[true, true, true, false, false]，因为 Infinity % 2是NaN， -9 % 2 是 -1</p>

<ol>
<li>以下程序的输出是什么
<code>javascript
parseInt(3, 8)
parseInt(3, 2)
parseInt(3, 0)
</code></li>
</ol>


<p>  答案是3,NaN,3, 前两个很显然，但是0呢，parseInt认为他是虚假的radix，会假设你给的是10</p>

<ol>
<li><code>Array.isArray( Array.prototype )</code> 的输出是什么</li>
</ol>


<p>  true, Array.prototype是Array，不是Object</p>

<ol>
<li>下面程序段的输出是什么
<code>javascript
var a = [0];
if ([0]) {
console.log(a == true);
} else {
console.log("wut");
}
</code></li>
</ol>


<p>  false, [0]作为布尔值的时候是true，但是当他在做比较的时候[0]用另一种方式做转换，所以是false。是不是有一种想掀桌的想法。</p>

<ol>
<li><code>[]==[]</code> 的结果是什么</li>
</ol>


<p>  false, 因为这是两个不同的实例对象，所以false，这样就正确了 typeof [] ==  typeof [].</p>

<ol>
<li>下面的程序输出是什么
<code>javascript
'5' + 3
'5' - 3
</code></li>
</ol>


<p>  &ldquo;53&rdquo;,2，当+左边是字符串是，执行字符串连接。-号将左边转换成了数字。</p>

<ol>
<li><p><code>1 + - + + + - + 1</code>执行结果是什么</p>

<p>答案是2。很有趣，当你执行没有空格的语句时，结果为error。//TODO</p></li>
<li><p>下面程序段的执行结果是什么
<code>javascript
var ary = Array(3);
ary[0]=2
ary.map(function(elem) { return '1'; });
</code></p></li>
</ol>


<p>  [&ldquo;1&rdquo;, undefined, undefined]，因为map只对初始化的数组元素有效果。</p>

<ol>
<li>下面的程序段的结果是什么
<code>javascript
function sidEffecting(ary) {
ary[0] = ary[2];
}
function bar(a,b,c) {
c = 10
sidEffecting(arguments);
return a + b + c;
}
bar(1,1,1)
</code></li>
</ol>


<p>  答案是21，arguments这是一个特别变量，是传递给这个函数的参数列表。所以c变为10，a也在执行sidEffection时变成了10，结果变为21。这个也可以从这里找到答案<a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#function.arguments">arguments</a></p>

<ol>
<li>下面表达式的结果是什么
<code>javascript
var a = 111111111111111110000,
b = 1111;
a + b;
</code></li>
</ol>


<p>  同第六个。</p>

<ol>
<li>下面程序段的结果是什么
<code>javascript
var x = [].reverse;
x();
</code></li>
</ol>


<p>  是window，[].reverse会返回this指针，当没有明确的接收对象时，会被默认为window</p>

<ol>
<li><code>Number.MIN_VALUE &gt; 0</code> 正确吗？</li>
</ol>


<p>  正确，因为Number.MIN_VALUE是大于0的最小的数， -Number.MAX_VALUE是最小的数。</p>

<ol>
<li><code>[1 &lt; 2 &lt; 3, 3 &lt; 2 &lt; 1]</code>的结果是什么</li>
</ol>


<p>  [true, true] 执行顺序为(1 &lt; 2) &lt; 3 和 (3 &lt; 2) &lt; 1， 即 true &lt; 3, false &lt; 1，即true, true</p>

<ol>
<li><code>2 == [[[2]]]</code>结果是什么</li>
</ol>


<p>  [[2]]转换成为了对象，在比较的时候两边都转换成为了字符串"2"</p>
]]></content>
  </entry>
  
</feed>
