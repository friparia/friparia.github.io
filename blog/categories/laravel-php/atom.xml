<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Laravel,php | Friparia Blog]]></title>
  <link href="http://friparia.github.io/blog/categories/laravel-php/atom.xml" rel="self"/>
  <link href="http://friparia.github.io/"/>
  <updated>2014-08-25T21:24:17+08:00</updated>
  <id>http://friparia.github.io/</id>
  <author>
    <name><![CDATA[Friparia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel 带参数的命令行开发]]></title>
    <link href="http://friparia.github.io/blog/2014/06/16/laravel-command-with-option-chs/"/>
    <updated>2014-06-16T17:27:33+08:00</updated>
    <id>http://friparia.github.io/blog/2014/06/16/laravel-command-with-option-chs</id>
    <content type="html"><![CDATA[<p>上一次我们简要介绍了Laravel中命令行的不带参数或者选项的开发，今天我们要完善我们上一次的压缩css的工作，使得我们可以压缩我们指定的css文件，如以下命令所示</p>

<!--more-->


<p><code>php artisan compress:css --file=public/css/example.css</code>或者<code>php artisan compress:css -f public/css/example.css</code></p>

<p>这就我们需要来了解上一次被我们注释掉的<code>getArguments()</code>和<code>getOptions()</code>方法，这两个方法是由Laravel提供的，为了自定义自己的参数或者选项而设置的。</p>

<h2>getArguments</h2>

<p>这个函数返回一个数组，数组中的元素定义为
<code>php
array($name, $mode, $description, $defaultValue)
</code>
<code>$name</code>是参数的名字，<code>$mode</code>是其模式，这个函数有这两个值:</p>

<ul>
<li><code>InputArgument::REQUIRED</code>，表示这个参数是必须的，如果在使用命令的时候没有输入，则会报错</li>
<li><code>InputArgument::OPTIONAL</code>，这个则表示是可选的，在使用命令时可以不用。
<code>$description</code>是这个参数的描述，在<code>--hlep</code>时会显示其描述，<code>$defaultValue</code>顾名思义即为这个参数的默认值</li>
</ul>


<h2>getOptions</h2>

<p>要想实现开头所说的效果，于是我们就着重使用getOptions这个函数，同样和<code>getArguments</code>返回相同的数组，不过数组中的元素不一样
<code>php
array($name, $shortcut, $mode, $description, $defaultValue)
</code>
多了一个<code>$shortcut</code>选项，在我们的例子中我们可以将其设置成为<code>-f</code>，而其模式<code>$mode</code>也有不同，如下所示:</p>

<ul>
<li><code>InputOption::VALUE_REQUIRED</code>，表明这个参数是必须的</li>
<li><code>InputOption::VALUE_OPTIONAL</code>，表明这个参数是可选的</li>
<li><code>InputOption::VALUE_IS_ARRAY</code> ，表明这个参数是一个数组，使用命令时呈现这种形式<code>--option=value1 --option=value2</code></li>
<li><code>InputOption::VALUE_NONE</code>，表明只是一个开关而没有具体参数，如同我们在编译安装时的<code>--with-xxx</code></li>
</ul>


<p>了解了我们的函数后我们就可以完成我们的方法了:
```php CompressCssCommand.php</p>

<pre><code>/**
 * Get the console command options.
 *
 * @return array
 */
protected function getOptions()
{
    return array(
        array('file', '-f', InputOption::VALUE_OPTIONAL, 'Compress an input css file', null),
    );
}
</code></pre>

<p>```</p>

<p>完成这两个函数后我们可以通过这样的方法得到我们的选项或者参数值
<code>
$this-&gt;argument('file'); //获取$name为"file"的参数的值
$this-&gt;argument(); //获得所有参数的数组
$this-&gt;option('file'); //获取$name为"file"的选项的值
$this-&gt;option(); //获得所有选项的数组
</code></p>

<p>然后我们完成最后的逻辑，修改我们的<code>fire()</code>函数为:
```php CompressCssCommand.php</p>

<pre><code>public function fire()
{
    $inputfile = $this-&gt;option('file');
    if(is_null($inputfile) &amp;&amp; $this-&gt;confirm('Compress all css files?[Yes/No]')){
      // 上一次我们书写的代码
    }else if($this-&gt;confirm('Compress this '.$inputfile.' css files?[Yes/No]')){
        $this-&gt;info('compressing ...');
        $file = $inputfile;
        $cssdir = public_path().'/css';
        $compressed_filename = $cssdir.'/'.time().'_compressed.min.css';
        $path_parts = pathinfo($file);
        if($path_parts['extension'] == 'css'){
            $minified = Assetcompresser::minifycss(base_path().'/'.$file);
        }
        file_put_contents($compressed_filename, $minified);
        $this-&gt;line('');
        $this-&gt;info('css has compressed! The file'.$compressed_filename.' generated');
    }
}
</code></pre>

<p>```</p>

<h1>总结</h1>

<p>这个asset压缩的包我会上传到我的github和packagist上去，并且将其功能完善得更好，欢迎大家拍砖……</p>

<p>这样我们的Laravel的命令行攻略也算介绍完了，个人觉得主要是因为文档中没有一个确定的例子来带着做有可能在第一次使用到的时候遇到麻烦，所以写了这几篇，也算是练练手，非常感谢<a href="http://weibo.com/byrwdjwxh">@耗子飞飞飞_BYR</a>给予的指导~接下来可能会准备深入了解一下Laravel的框架，然后在更深的层面上写一点东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 命令行开发入门]]></title>
    <link href="http://friparia.github.io/blog/2014/05/17/laravel-command-line-walkthrough/"/>
    <updated>2014-05-17T23:08:46+08:00</updated>
    <id>http://friparia.github.io/blog/2014/05/17/laravel-command-line-walkthrough</id>
    <content type="html"><![CDATA[<p>上一篇我们试过了Laravel中的包开发，我们可以创建自己的包，并且复用他们，来很快的构建我们的应用，这一次我们来简要介绍一下Laravel中另一个强大的功能，Artisan命令行，当然，文档是一切的基础<a href="http://www.golaravel.com/docs/4.1/commands/">中文文档</a>，这个可能稍微有点过时，如生成使得<code>--bench</code>的参数在新版本中就已经去掉了，所以看<a href="https://www.laravel.com/">英文文档</a>是一个不错的选择</p>

<!--more-->


<h1>准备</h1>

<p>所有的新东西都得需要曾经的基础，首先的基础就是Laravel的开发的基础了，如果使用过命令行，比如数据库迁移命令的话会更好的理解。应用命令行我们能够更好更快的构建我们的应用，或者对我们的应用进行一些命令行的操作。</p>

<h1>创建</h1>

<p>我们可能有两种不同的命令行开发，一种是在应用中的，可以简单的理解为我们的代码都是写在<code>app/commands</code>这个目录下的，另一种是在开发的包中的，也可以理解为我们所写的命令行代码是在<code>workbench/vendor/package/src/Vendor/Package/</code>文件中的，区别我们稍后会提到。</p>

<p>运行<code>php artisan command:make YourCommand</code>就可以创建一个命令了，默认是创建在你的应用中，即<code>app/commands</code>这个目录中，而如果我们需要创建在自己开发的包中的命令的话，我们就需要加上<code>--path=workbench/vendor/package/src/Vendor/Package</code>这个参数，这样我们创建的命令才可以随着包的发布而进行使用了。</p>

<h1>实现</h1>

<p>用命令行就可以搭一个很不错的架子出来，我们可以打开生成的<code>workbench/vendor/package/src/commands/YourCommand.php</code>这个文件，来完成我们具体的命令实现。
由于<code>--bench</code>参数不再支持，所以我们手动在开始加入
<code>php
namespace Vendor\Package;
</code></p>

<p>这一行，使得我们的包能够找到所对应的命令。</p>

<p>在<code>YourCommand</code>这个类中我们可以看到这几个方法:</p>

<ul>
<li><code>__consruct()</code>，当然这个是默认的构造函数没什么可说的</li>
<li><code>fire()</code>， 这个函数是在我们运行命令的时候所执行的函数，即我们需要实现的具体逻辑代码就是写在这个里面的</li>
<li><code>getArguments()</code>和<code>getOptions()</code>是得到命令的参数和选项，如果有参数设置的需要，我们可以通过<code>$this-&gt;argument('name')</code>和<code>$this-&gt;option('name')</code>来获得我们所需要的参数。
同时还有两个属性:</li>
<li><code>$name</code>，是这个命令的名字，即在命令行中所敲的</li>
<li><code>$description</code>，是这个命令的描述，会对这个命令进行一个简要的描述</li>
</ul>


<p>了解了这些之后我们就可以完成我们的<code>fire()</code>函数了，我们可能用得到的输出函数<code>info</code>,<code>comment</code>,<code>question</code>,<code>error</code>等可以以一种简单的方式使用。
比如我们在刚开始询问是否生成，就可以写下以下代码:</p>

<p><code>php
if($this-&gt;confirm('确定生成?[Y|N]){
  $this-&gt;info('生成中....');
}
</code></p>

<p>这样我们就能够写出我们的具体的命令了，下面我们以一个压缩assets的命令例子来详细叙述整个包命令开发的过程</p>

<h1>例子</h1>

<p>首先按照<a href="http://www.friparia.com/blog/2014/04/18/laravel-package-develop-walkthrough/">包生成</a>来生成一个assetcompress的包，然后执行<code>command:make</code>命令在包内生成一个compress css的命令，我们执行的是<code>php artisan command:make CompressCssCommand --path=workbench/friparia/assetcompresser/src/Friparia/Assetcompresser</code></p>

<p>然后打开<code>workbench/vendor/package/src/commands/</code>文件夹中刚才生成的文件，按照上述加入namespace我们来设定我们这个命令和描述
<code>php CompressCssCommand.php
protected $name = 'compress:css';
protected $description = 'Compress your css files to save your network traffic. No parameter means compress all css files in public/css in one file and "--file" means compress specify file';
</code></p>

<p>这样当我们运行<code>php artisan</code>时我们就可以看到我们的命令以及说明了，然后完成<code>fire()</code>方法，我们先完成不加参数的方法(此时需要先将<code>getArguments()</code>和<code>getOptions()</code>两个方法注释掉)</p>

<p>```php CompressCssCommand.php</p>

<pre><code>public function fire()
{
    if($this-&gt;confirm('Compress all css files?[Yes/No]')){
        $this-&gt;line('');
        $this-&gt;info('compressing ...');
        $cssdir = public_path().'/css';
        $compressed_filename = $cssdir.'/'.time().'_compressed.min.css';
        if(is_dir($cssdir)){
            if($dh = opendir($cssdir)){
                $minified = "";
                while($file = readdir($dh)){
                    if($file != '.' &amp;&amp; $file != '..'){
                        $path_parts = pathinfo($file);
                        if($path_parts['extension'] == 'css'){
                            $minified .= Assetcompresser::minifycss($cssdir.'/'.$file);
                        }
                    }
                }
                file_put_contents($compressed_filename, $minified);
                $this-&gt;line('');
                $this-&gt;info('css has compressed! The file'.$compressed_filename.' generated');
            }else{
                $this-&gt;error('Cannot open '.$cssdir);
            }
        }else{
            $this-&gt;error($cssdir."does not exist");
        }
    }
}
</code></pre>

<p>```</p>

<p>我们有使用到<code>Assetcompresser::minifycss()</code>来压缩css，即我们这个包的功能，所以我们创建<code>Assetcompresser.php</code>文件，完成所需功能:</p>

<p>```php Assetcompresser.php
&lt;?php namespace Friparia\Assetcompresser;
class Assetcompresser{</p>

<pre><code>/**
 * Minifies css files
 * @param  string  $path  input css file
 * @return string         compressed string
 */
static public function minifycss($path){
    if(file_exists($path)){
        if($contents = file_get_contents($path)){
            $contents = trim($contents);
            $contents = str_replace("\r\n", "\n", $contents);
            $search = array("/\/\*[\d\D]*?\*\/|\t+/", "/\s+/", "/\}\s+/");
            $replace = array(null, " ", "}\n");
            $contents = preg_replace($search, $replace, $contents);
            $search = array("/\\;\s/", "/\s+\{\\s+/", "/\\:\s+\\#/", "/,\s+/i", "/\\:\s+\\\'/i", "/\\:\s+([0-9]+|[A-F]+)/i");
            $replace = array(";", "{", ":#", ",", ":\'", ":$1");
            $contents = preg_replace($search, $replace, $contents);
            $contents = str_replace("\n", null, $contents);
            return $contents;  
        }else{
            return "";
        }

    }else{
        return "";
    }
}
</code></pre>

<p>}
```</p>

<p>最后别忘了在ServiceProvider里注册我们的命令，打开<code>AssetcompresserServiceProvider.php</code>，在<code>register()</code>方法中添加:
```php CompressCssCommand.php</p>

<pre><code>    $this-&gt;app['command.compress.css'] = $this-&gt;app-&gt;share(function($app){
        return new CompressCssCommand($app);
    });
    $this-&gt;commands(
        'command.compress.css'
    );
</code></pre>

<p><code>``
以使得我们的命令能够正确的被执行，执行</code>php artisan compress:css`就可以得到我们压缩后的css文件。</p>

<p>到此我们的不加参数的命令行的命令开发就完成了，在下一篇博客中我会把加参数的命令开发完成。并且利用空闲时间把这整个包完成~</p>
]]></content>
  </entry>
  
</feed>
