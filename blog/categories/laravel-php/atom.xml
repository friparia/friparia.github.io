<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Laravel,php | Friparia Blog]]></title>
  <link href="http://friparia.github.io/blog/categories/laravel-php/atom.xml" rel="self"/>
  <link href="http://friparia.github.io/"/>
  <updated>2014-05-24T14:55:21+08:00</updated>
  <id>http://friparia.github.io/</id>
  <author>
    <name><![CDATA[Friparia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel 命令行开发入门]]></title>
    <link href="http://friparia.github.io/blog/2014/05/17/laravel-command-line-walkthrough/"/>
    <updated>2014-05-17T23:08:46+08:00</updated>
    <id>http://friparia.github.io/blog/2014/05/17/laravel-command-line-walkthrough</id>
    <content type="html"><![CDATA[<p>上一篇我们试过了Laravel中的包开发，我们可以创建自己的包，并且复用他们，来很快的构建我们的应用，这一次我们来简要介绍一下Laravel中另一个强大的功能，Artisan命令行，当然，文档是一切的基础<a href="http://www.golaravel.com/docs/4.1/commands/">中文文档</a>，这个可能稍微有点过时，如生成使得<code>--bench</code>的参数在新版本中就已经去掉了，所以看<a href="https://www.laravel.com/">英文文档</a>是一个不错的选择</p>

<!--more-->


<h1>准备</h1>

<p>所有的新东西都得需要曾经的基础，首先的基础就是Laravel的开发的基础了，如果使用过命令行，比如数据库迁移命令的话会更好的理解。应用命令行我们能够更好更快的构建我们的应用，或者对我们的应用进行一些命令行的操作。</p>

<h1>创建</h1>

<p>我们可能有两种不同的命令行开发，一种是在应用中的，可以简单的理解为我们的代码都是写在<code>app/commands</code>这个目录下的，另一种是在开发的包中的，也可以理解为我们所写的命令行代码是在<code>workbench/vendor/package/src/commands</code>文件中的，区别我们稍后会提到。
运行<code>php artisan command:make YourCommand</code>就可以创建一个命令了，默认是创建在你的应用中，即<code>app/commands</code>这个目录中，而如果我们需要创建在自己开发的包中的命令的话，我们就需要加上<code>--path=workbench/vendor/package/src/commands</code>这个参数，这样我们创建的命令才可以随着包的发布而进行使用了。在Yii框架里面，gii是一个非常好用的功能，使得我们能够以最快的速度生产出批量的代码，所以我们仿照gii的模式来创造一个Laravel的code generator。我们以包的命令创建为基础，即带path参数的<code>command:make</code>命令。</p>

<h1>实现</h1>

<p>用命令行就可以搭一个很不错的架子出来，我们可以打开生成的<code>workbench/vendor/package/src/commands/YourCommand.php</code>这个文件，来完成我们具体的命令实现。
由于<code>--bench</code>参数不再支持，所以我们手动在开始加入
<code>php
namespace Vendor\Package;
</code>
这一行，使得我们的包能够找到所对应的命令。
在<code>YourCommand</code>这个类中我们可以看到这几个方法:
 &ndash; <code>__consruct()</code>，当然这个是默认的构造函数没什么可说的
 &ndash; <code>fire()</code>， 这个函数是在我们运行命令的时候所执行的函数，即我们需要实现的具体逻辑代码就是写在这个里面的
 &ndash; <code>getArguments()</code>和<code>getOptions()</code>是得到命令的参数和选项，如果有参数设置的需要，我们可以通过<code>$this-&gt;argument('name')</code>和<code>$this-&gt;option('name')</code>来获得我们所需要的参数。
同时还有两个属性:
 &ndash; <code>$name</code>，是这个命令的名字，即在命令行中所敲的
 &ndash; <code>$description</code>，是这个命令的描述，会对这个命令进行一个简要的描述
了解了这些之后我们就可以完成我们的<code>fire()</code>函数了，我们可能用得到的输出函数<code>info</code>,<code>comment</code>,<code>question</code>,<code>error</code>等可以以一种简单的方式使用。
比如我们在刚开始询问是否生成，就可以写下以下代码:
<code>php
if($this-&gt;confirm('确定生成?[Y|N]){
  $this-&gt;info('生成中....');
}
</code>
这样我们就能够写出我们的具体的命令了，下面我们以一个压缩assets的命令例子来详细叙述整个包命令开发的过程</p>

<h1>例子</h1>
]]></content>
  </entry>
  
</feed>
