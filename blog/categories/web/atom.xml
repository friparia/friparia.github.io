<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web, | Friparia Blog]]></title>
  <link href="http://blog.friparia.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://blog.friparia.com/"/>
  <updated>2016-01-21T16:39:54+08:00</updated>
  <id>http://blog.friparia.com/</id>
  <author>
    <name><![CDATA[Friparia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[信息系统中的权限控制(三)：基于资源的权限控制]]></title>
    <link href="http://blog.friparia.com/blog/2015/07/10/access-control-part-three/"/>
    <updated>2015-07-10T13:37:46+08:00</updated>
    <id>http://blog.friparia.com/blog/2015/07/10/access-control-part-three</id>
    <content type="html"><![CDATA[<p>前两篇文章介绍了基于用户的权限控制，这种权限的控制是将用户进行划分，对系统中的操作进行一定的权限控制。但是在日常应用中，我们可能遇到这样一种场景：不同的用户分管不同的系统资源，比如Linux中的文件系统、比如淘宝店铺中的商品只能归所拥有的店主管理。在这种情形下就无法针对用户进行权限控制，而是应当具体到每个实体资源上去。</p>

<!--more-->


<h1>基于资源的权限控制</h1>

<p>文章中对基于用户的权限控制的具体实现涉及到的比较多，而这篇可能就是提出一种思路或者想法，并没有一种特别好的实现方式。尤其是在Web应用下具体的某个资源非常难以精确抽象，不像Linux系统中我们可以很容易的抽象出目录和文件这两个资源，并进行权限控制)。</p>

<p>因为Web应用可以做为资源的实体会非常多，而对资源的控制要求又比较强。当然，最简单的就是把他当做产品的具体业务逻辑，根据具体的情形书写具体的代码，这个方法如果管理比较复杂的权限控制的话就会产生大量烦杂的代码，对整个系统不很友好。</p>

<p>如果在系统中使用了ORM，并且运用了一定的框架，那么就可以将具体的资源抽象到每个Model上面去，然后在Model的基类来完成具体的权限控制代码。一般情形是对查找出来的结果集进行过滤，然后将过滤后的结果集返回。或者在查询的时候添加一定的条件。下面给一个phalcon框架的filter例子:</p>

<p>```php
&lt;?php
public function afterFetch(){</p>

<pre><code>if(!Auth::canOperate(get_called_class(), $this-&gt;id)){
    die("你没有权限操作该对象!");
}
</code></pre>

<p>}</p>

<p>public static function find($parameters = null){</p>

<pre><code>$where = Auth::resourceWhere(get_called_class());
if(!$where){
    return parent::find($parameters);
}
if(is_array($parameters)){
    if(isset($parameters['conditions'])){
        if($parameters['conditions'] == ""){
            $parameters['conditions'] = $where;
        }else{
            $parameters['conditions'] .= " and ".$where;
        }
    }else{
        if($parameters[0] == ""){
            $parameters[0] = $where;
        }else{
            $parameters[0] .= " and ".$where;
        }
    }
}else{
    if($parameters == ""){
        $parameters = $where;
    }else{
        $parameters .= " and ".$where;
    }
}
return parent::find($parameters);
</code></pre>

<p>}
```</p>

<p>如果没有使用ORM，只是用纯SQL语句取结果集的话，可能就需要针对具体的SQL进行拼接，拼接出权限控制后的SQL语句。</p>

<p>不管什么样的方式，基于资源的权限控制都不是一件很好处理的事情，尤其是当需求不断的叠加时，会导致权限控制更加复杂，更加麻烦。</p>

<h1>总结</h1>

<p>只要有信息的地方，就会有权限控制，权限控制也是安全中的一项非常重要的一环，因为权限而导致的漏洞数不胜数，而且每个漏洞的危害都巨大无比，这里有个微信的资源控制的<a href="http://www.wooyun.org/bugs/wooyun-2010-090898">漏洞</a>，赤裸裸的抢钱啊。权限控制说起来容易，但是做起来，如何去设计，如何去兼容到整个系统中，如何将对其他模块的影响降到最低，是一件非常棘手的事情。希望我的这几篇博客给大家带来一点有关权限控制的思路。</p>

<h1>P.S.</h1>

<p>有关权限的东西也写的差不多了，现在做的系统的权限控制的地方也很稳定了(除了基于资源的权限)，刚开始觉得自己还有挺多东西要说的，写的时候才感觉到捉襟见肘，还是要多写写多练练啊。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[信息系统中的权限控制(一)：基于业务逻辑]]></title>
    <link href="http://blog.friparia.com/blog/2015/03/24/access-control-part-one/"/>
    <updated>2015-03-24T18:51:04+08:00</updated>
    <id>http://blog.friparia.com/blog/2015/03/24/access-control-part-one</id>
    <content type="html"><![CDATA[<p>互联网不断地发展，为信息的共享提供了一个更加完善的解决方案，提供了一个信息更加对等的环境。但是，我们不能无条件的扩散信息，一些敏感信息不能够对非授权用户提供，所以我们就需要对我们的信息系统进行访问控制，来保证企业等在信息系统中储存和处理的信息的安全。最近在对信息系统做一套访问控制，结合以前的开发，大概总结了一下几种权限控制的方法：基于业务逻辑、基于层级、基于角色、基于资源等权限控制方法，我们由最简单的基于业务逻辑的入手，对他们进行一个详细的讨论。</p>

<!--more-->


<h1>基于业务逻辑的权限控制</h1>

<p>基于业务逻辑的权限控制其实是最容易理解的，就是哪里需要权限控制就去哪里具体实现我自己的代码，比如我们对某个页面，某个操作进行控制，只能某些人进行访问，只能在逻辑代码前再贴上自己的权限控制逻辑</p>

<p><code>php SomePage.php
&lt;?php
if(!checkAuth()){
  die(403);//somebody that can not visit
}
//do something
?&gt;
</code></p>

<p>或者在具体某个地方再进行判断
```php SomeOtherPage.php
//some classic php operation
$action = $_GET[&lsquo;action&rsquo;];
switch($action){
  case &lsquo;action_one&rsquo;:</p>

<pre><code>//some thing
break;
</code></pre>

<p>  case &lsquo;action_two&rsquo;:</p>

<pre><code>if(!someCheck()){
  die(403);
}
//access controlled thing
break;
</code></pre>

<p>  default:</p>

<pre><code>//other thing
</code></pre>

<p>}
```</p>

<p>如果我们的信息系统比较容易，用户的分类也比较单一（比如就只有管理员和用户），我们就可以使用这种简单粗暴的方法进行权限控制，在这种时候，我们的基本上是比较低的，不管是需要写的代码还是需要思考的时间。但是，这个在软件工程中有一种非常明显的缺陷，就是几乎没有扩展性和维护性，要想对某个页面进行权限控制，基本上靠复制粘贴。</p>

<p>当我们的信息系统变得庞大起来时，我们的技术部门的人员不仅仅是两三个人的时候，我们就需要更加灵活、方便的权限控制方式，这时候基于业务逻辑的权限控制就显现出了其局限性，我们如果继续采用基于业务逻辑的权限控制的话，那么我们的代码就会变得异常庞大，变得不易维护，而且也不利于多人开发，我们就需要一个更加优秀的模型来替代这种权限检查的方式，这就是我们下次将会提到的基于层级的权限控制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你在浏览器里面输入网址后都发生了什么]]></title>
    <link href="http://blog.friparia.com/blog/2014/08/25/what-happened-after-typing-url-in-your-browser/"/>
    <updated>2014-08-25T19:11:29+08:00</updated>
    <id>http://blog.friparia.com/blog/2014/08/25/what-happened-after-typing-url-in-your-browser</id>
    <content type="html"><![CDATA[<p>最近好多面试题里面都有这道题目，而我在看书的时候也在书上发现了差不多的问题，于是就想总结一下这个过程。</p>

<!--more-->


<p>当你在地址栏里输入<a href="http://www.friparia.com">www.friparia.com</a>后按下回车，浏览器首先会进行DNS查询，因为对于网络上的计算机来说，它们的地址其实是由一个32位二进制数(IP地址)所确定的，我们人类上网的话没有办法记住这些数字，于是就有了一个分布式的数据库来保存域名和IP地址的映射关系，使我们更方便的上网。我们在网络设置中看到的DNS服务器一般是指我们的本地局域网的DNS缓存服务器，而全球一共有13组根域名服务器。可以在命令行模式下运行<code>nslookup</code>命令进行DNS查询</p>

<p>当进行完DNS查询后，我们的浏览器便知道我们需要访问的地址是198.52.124.101，此时大多数浏览器会发送两个HTTP请求，一个是GET /index.html，一个是GET /favicon.ico，index.html是网站的主页，而favicon.ico这个文件是所对应的那个小图标。</p>

<p>我们拿/index.html的这个请求单独来说，在应用层，使用的是HTTP协议，HTTP是一个在应用层的协议，服务器端一般使用80端口，下面是一个客户端的请求和一个服务器应答的头的例子。</p>

<p><code>c 客户端请求
GET / HTTP/1.1
Host:www.friparia.com
</code>
<code>c 服务器响应
HTTP/1.1 200 OK
Content-Length: 3059
Server:nginx/1.0.15
Last-Modified:Mon, 16 Jun 2014 10:08:28 GMT
Expires:Mon, 25 Aug 2014 10:16:27 GMT
Date:Mon, 25 Aug 2014 12:39:13 GMT
Connection:keep-alive
</code></p>

<p>客户端发出一个HTTP版本为1.1的GET请求，通常客户端请求的方法有GET、POST等，现在RESTful API的设计又将以前不怎么使用的UPDATE、PUT、DELETE等方法用上了。
服务器收到请求后经过处理就会发出一个响应，这个响应的状态号为200 OK，表示找到所需的文档并且回传过来，我们熟知的404 Not Found也是同样的，其实墙不会返回404，404表示的是服务器能和你有连接但是你所需要的文件不存在，而墙会直接把你的IP数据报给处理掉，当然IE旧版本的做法就是显示本地的404页面。上述仅仅是HTTP头的部分，HTTP内容是由头中的Content-Length所定义的，这内容就是我们index.html的具体内容了。</p>

<p>HTTP协议是应用层上的，是由对应的软件(浏览器/HTTP服务器)所使用的，他会将所有数据按字节流送到传输层，使用TCP协议将数据发送出去。计算机网络按照OSI标准分为七层，分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层，但是实际的网络并没有严格的使用这个标准。</p>

<p>在TCP协议中，是端对端的通信，是网络中计算机的进程之间的通信，TCP使用了三次握手和四次挥手来保证传输的可靠性，并且使用滑动窗口来进行拥塞控制，以保证我们的数据能够准确的到达目的地。和TCP同样在传输层的协议是UDP，是不可靠的无连接协议，在刚开始我们所说的DNS就是使用了UDP协议进行传输的。</p>

<p>TCP报文封装好之后，便交给下层的进行IP分片，网络层的通信就是计算机之间的了，是一个IP地址到另一个IP地址，IP是有着最大长度1500字节，所以为了保证传输所以要将TCP报文进行分片，再进行传输。在网络层，我们使用路由器来进行数据的中转，比如我在一个局域网中的IP是192.168.1.101，这时候计算机会将数据发送到网关，即就是直接和你相连的那个路由器(或交换机)，然后路由器查找自己的路由表将数据传送到下个节点，正是这种分布式的网络，以及易于扩展的特性，使得互联网发展的如此迅速。</p>

<p>说完互联网中两台计算机具体是如何通信的后，我们来了解下局域网内计算机和计算机或者说我们的计算机到路由器之间是怎么传送数据的。每一块网卡在出厂的时候都有一个唯一的MAC地址，当我们在局域网内发送数据的时候，就是使用的MAC地址而不是IP进行查找的。比如我们的路由器收到了服务器的响应，现在要将他发送到你的计算机上，它会先发一条广播信息，询问谁是192.168.1.101，在局域网内(一个广播域内)，所有计算机都会收到这条信息，但是只有192.168.1.101进行回答，并且将自己的MAC地址发送回去，路由器便使用这个MAC地址进行局域网内的数据传送，这就是ARP协议。</p>

<p>当这个文件在网络上传输完成时，浏览器会对这个HTML文件进行解析，HTML是一种标记语言，标记一些常用的元素，如标题、段落、表格等，由W3C进行标准的维护。在Webkit(Chrome所使用的内核)中，接受服务器所发送过来的数据，解析成一系列的Tokens，然后在加载结束后建立DOM树，DOM是对HTML或者XML文档的一种结构化表示方法，通过这种方法，用户可以通过提供标准的接口来访问HTML页面中任何元素的相关属性，并可对DOM进行相应的添加、删除和更新操作等。Webkit根据需要来创建Render树，然后基于这个Render树建立一棵新的RenderLayer树，通常各个RenderLayer的内容都绘制在同一块后端储存上，操作系统会将这些储存读取并且渲染在屏幕上。而同时浏览器根据需要进行Javascript的执行等。</p>

<p>简要的叙述了一下从URL输入到页面载入完成发生的事情，基本上都是计算机网络中的，最后的Webkit渲染涉及的不是太多，只是大概看过一本书，没有深入的研究过，也就提一下。</p>

<p>【考研期间刷一下存在。。。。。。。。。</p>

<p>有任何问题可以通过以下方式联系我:</p>

<ul>
<li><p>邮箱:<a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x66;&#x72;&#x69;&#x70;&#x61;&#x72;&#x69;&#x61;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x66;&#x72;&#x69;&#112;&#x61;&#114;&#105;&#x61;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a></p></li>
<li><p>irc:<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#102;&#114;&#x69;&#x70;&#x61;&#114;&#105;&#97;&#x40;&#105;&#x72;&#99;&#46;&#102;&#x72;&#x65;&#101;&#x6e;&#111;&#x64;&#x65;&#x2e;&#110;&#x65;&#116;">&#x66;&#114;&#105;&#112;&#x61;&#114;&#105;&#x61;&#x40;&#x69;&#114;&#x63;&#x2e;&#102;&#x72;&#101;&#x65;&#x6e;&#111;&#x64;&#101;&#46;&#110;&#x65;&#116;</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
