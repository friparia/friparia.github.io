<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Framework | Friparia Blog]]></title>
  <link href="http://blog.friparia.com/blog/categories/framework/atom.xml" rel="self"/>
  <link href="http://blog.friparia.com/"/>
  <updated>2016-01-21T16:39:54+08:00</updated>
  <id>http://blog.friparia.com/</id>
  <author>
    <name><![CDATA[Friparia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[信息系统中的权限控制(三)：基于资源的权限控制]]></title>
    <link href="http://blog.friparia.com/blog/2015/07/10/access-control-part-three/"/>
    <updated>2015-07-10T13:37:46+08:00</updated>
    <id>http://blog.friparia.com/blog/2015/07/10/access-control-part-three</id>
    <content type="html"><![CDATA[<p>前两篇文章介绍了基于用户的权限控制，这种权限的控制是将用户进行划分，对系统中的操作进行一定的权限控制。但是在日常应用中，我们可能遇到这样一种场景：不同的用户分管不同的系统资源，比如Linux中的文件系统、比如淘宝店铺中的商品只能归所拥有的店主管理。在这种情形下就无法针对用户进行权限控制，而是应当具体到每个实体资源上去。</p>

<!--more-->


<h1>基于资源的权限控制</h1>

<p>文章中对基于用户的权限控制的具体实现涉及到的比较多，而这篇可能就是提出一种思路或者想法，并没有一种特别好的实现方式。尤其是在Web应用下具体的某个资源非常难以精确抽象，不像Linux系统中我们可以很容易的抽象出目录和文件这两个资源，并进行权限控制)。</p>

<p>因为Web应用可以做为资源的实体会非常多，而对资源的控制要求又比较强。当然，最简单的就是把他当做产品的具体业务逻辑，根据具体的情形书写具体的代码，这个方法如果管理比较复杂的权限控制的话就会产生大量烦杂的代码，对整个系统不很友好。</p>

<p>如果在系统中使用了ORM，并且运用了一定的框架，那么就可以将具体的资源抽象到每个Model上面去，然后在Model的基类来完成具体的权限控制代码。一般情形是对查找出来的结果集进行过滤，然后将过滤后的结果集返回。或者在查询的时候添加一定的条件。下面给一个phalcon框架的filter例子:</p>

<p>```php
&lt;?php
public function afterFetch(){</p>

<pre><code>if(!Auth::canOperate(get_called_class(), $this-&gt;id)){
    die("你没有权限操作该对象!");
}
</code></pre>

<p>}</p>

<p>public static function find($parameters = null){</p>

<pre><code>$where = Auth::resourceWhere(get_called_class());
if(!$where){
    return parent::find($parameters);
}
if(is_array($parameters)){
    if(isset($parameters['conditions'])){
        if($parameters['conditions'] == ""){
            $parameters['conditions'] = $where;
        }else{
            $parameters['conditions'] .= " and ".$where;
        }
    }else{
        if($parameters[0] == ""){
            $parameters[0] = $where;
        }else{
            $parameters[0] .= " and ".$where;
        }
    }
}else{
    if($parameters == ""){
        $parameters = $where;
    }else{
        $parameters .= " and ".$where;
    }
}
return parent::find($parameters);
</code></pre>

<p>}
```</p>

<p>如果没有使用ORM，只是用纯SQL语句取结果集的话，可能就需要针对具体的SQL进行拼接，拼接出权限控制后的SQL语句。</p>

<p>不管什么样的方式，基于资源的权限控制都不是一件很好处理的事情，尤其是当需求不断的叠加时，会导致权限控制更加复杂，更加麻烦。</p>

<h1>总结</h1>

<p>只要有信息的地方，就会有权限控制，权限控制也是安全中的一项非常重要的一环，因为权限而导致的漏洞数不胜数，而且每个漏洞的危害都巨大无比，这里有个微信的资源控制的<a href="http://www.wooyun.org/bugs/wooyun-2010-090898">漏洞</a>，赤裸裸的抢钱啊。权限控制说起来容易，但是做起来，如何去设计，如何去兼容到整个系统中，如何将对其他模块的影响降到最低，是一件非常棘手的事情。希望我的这几篇博客给大家带来一点有关权限控制的思路。</p>

<h1>P.S.</h1>

<p>有关权限的东西也写的差不多了，现在做的系统的权限控制的地方也很稳定了(除了基于资源的权限)，刚开始觉得自己还有挺多东西要说的，写的时候才感觉到捉襟见肘，还是要多写写多练练啊。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[信息系统中的权限控制(一)：基于业务逻辑]]></title>
    <link href="http://blog.friparia.com/blog/2015/03/24/access-control-part-one/"/>
    <updated>2015-03-24T18:51:04+08:00</updated>
    <id>http://blog.friparia.com/blog/2015/03/24/access-control-part-one</id>
    <content type="html"><![CDATA[<p>互联网不断地发展，为信息的共享提供了一个更加完善的解决方案，提供了一个信息更加对等的环境。但是，我们不能无条件的扩散信息，一些敏感信息不能够对非授权用户提供，所以我们就需要对我们的信息系统进行访问控制，来保证企业等在信息系统中储存和处理的信息的安全。最近在对信息系统做一套访问控制，结合以前的开发，大概总结了一下几种权限控制的方法：基于业务逻辑、基于层级、基于角色、基于资源等权限控制方法，我们由最简单的基于业务逻辑的入手，对他们进行一个详细的讨论。</p>

<!--more-->


<h1>基于业务逻辑的权限控制</h1>

<p>基于业务逻辑的权限控制其实是最容易理解的，就是哪里需要权限控制就去哪里具体实现我自己的代码，比如我们对某个页面，某个操作进行控制，只能某些人进行访问，只能在逻辑代码前再贴上自己的权限控制逻辑</p>

<p><code>php SomePage.php
&lt;?php
if(!checkAuth()){
  die(403);//somebody that can not visit
}
//do something
?&gt;
</code></p>

<p>或者在具体某个地方再进行判断
```php SomeOtherPage.php
//some classic php operation
$action = $_GET[&lsquo;action&rsquo;];
switch($action){
  case &lsquo;action_one&rsquo;:</p>

<pre><code>//some thing
break;
</code></pre>

<p>  case &lsquo;action_two&rsquo;:</p>

<pre><code>if(!someCheck()){
  die(403);
}
//access controlled thing
break;
</code></pre>

<p>  default:</p>

<pre><code>//other thing
</code></pre>

<p>}
```</p>

<p>如果我们的信息系统比较容易，用户的分类也比较单一（比如就只有管理员和用户），我们就可以使用这种简单粗暴的方法进行权限控制，在这种时候，我们的基本上是比较低的，不管是需要写的代码还是需要思考的时间。但是，这个在软件工程中有一种非常明显的缺陷，就是几乎没有扩展性和维护性，要想对某个页面进行权限控制，基本上靠复制粘贴。</p>

<p>当我们的信息系统变得庞大起来时，我们的技术部门的人员不仅仅是两三个人的时候，我们就需要更加灵活、方便的权限控制方式，这时候基于业务逻辑的权限控制就显现出了其局限性，我们如果继续采用基于业务逻辑的权限控制的话，那么我们的代码就会变得异常庞大，变得不易维护，而且也不利于多人开发，我们就需要一个更加优秀的模型来替代这种权限检查的方式，这就是我们下次将会提到的基于层级的权限控制。</p>
]]></content>
  </entry>
  
</feed>
